// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//------------------------------------
//                Run after edit :
//                pnpx prisma generate
//                pnpx prisma db push
//                restart ide
//------------------------------------

model User {
  id                Int         @id @default(autoincrement())
  username          String?     @unique
  password          String?
  firstname         String
  lastname          String
  email             String      @unique
  phone             String?
  role              Role        @default(NONE)
  presidents        Colony[]    @relation("presidents")
  treasurers        Colony[]    @relation("treasurers")
  secretaries       Colony[]    @relation("secretaries")
  formerPresidents  Colony[]    @relation("formerPresidents")
  formerTreasurers  Colony[]    @relation("formerTreasurers")
  formerSecretaries Colony[]    @relation("formerSecretaries")
  owners            Residence[] @relation("owners")
  tenants           Residence[] @relation("tenants")
  responsible       Residence[] @relation("responsibles")
  formerOwners      Residence[] @relation("formerOwners")
  formerTenants     Residence[] @relation("formerTenants")
  formerResponsible Residence[] @relation("formerResponsibles")
  active            Boolean     @default(false)
  blocked           Boolean     @default(false)
  imageUrl          String?
  langKey           LangKey     @default(ES)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Colony {
  id                                    Int            @id @default(autoincrement())
  name                                  String @unique
  createdAt                             DateTime       @default(now())
  updatedAt                             DateTime       @updatedAt
  active                                Boolean        @default(false)
  deleted                               Boolean        @default(false)
  address                               String
  nearBy                                String
  city                                  String
  type                                  ColonyType?
  roleNotificationsSuspended            Boolean        @default(false)
  savedDuringRoleNotificationsSuspended Boolean        @default(false)
  formerPresident                       User?          @relation("formerPresidents", fields: [formerPresidentId], references: [id])
  formerPresidentId                     Int?
  formerTreasurer                       User?          @relation("formerTreasurers", fields: [formerTreasurerId], references: [id])
  formerTreasurerId                     Int?
  formerSecretary                       User?          @relation("formerSecretaries", fields: [formerSecretaryId], references: [id])
  formerSecretaryId                     Int?
  president                             User           @relation("presidents", fields: [presidentId], references: [id])
  presidentId                           Int
  treasurer                             User?          @relation("treasurers", fields: [treasurerId], references: [id])
  treasurerId                           Int?
  secretary                             User?          @relation("secretaries", fields: [secretaryId], references: [id])
  secretaryId                           Int?
  residences                            Residence[]
  residenceTags                         ResidenceTag[]
}

model Residence {
  id                                    Int            @id @default(autoincrement())
  doorNumber                            String
  colony                                Colony         @relation(fields: [colonyId], references: [id])
  colonyId                              Int
  owner                                 User           @relation("owners", fields: [ownerId], references: [id])
  ownerId                               Int
  tenant                                User           @relation("tenants", fields: [tenantId], references: [id])
  tenantId                              Int
  responsible                           User           @relation("responsibles", fields: [responsibleId], references: [id])
  responsibleId                         Int
  formerOwner                           User?           @relation("formerOwners", fields: [formerOwnerId], references: [id])
  formerOwnerId                         Int?
  formerTenant                          User?           @relation("formerTenants", fields: [formerTenantId], references: [id])
  formerTenantId                        Int?
  formerResponsible                     User?           @relation("formerResponsibles", fields: [formerResponsibleId], references: [id])
  formerResponsibleId                   Int?
  residenceTags                         ResidenceTag[]
  balance                               Decimal        @default(0.0)
  deleted                               Boolean        @default(false)
  savedDuringRoleNotificationsSuspended Boolean        @default(false)
  @@unique([colonyId, doorNumber])
}

model ResidenceTag {
  id         Int         @id @default(autoincrement())
  colony     Colony      @relation(fields: [colonyId], references: [id])
  colonyId   Int
  name       String
  deleted    Boolean     @default(false)
  residences Residence[]
  @@unique([colonyId, name])
}

enum ColonyType {
  HOUSES
  APARTMENTS
}

enum Role {
  NONE
  USER
  ADMIN
  GOD
}

enum LangKey {
  EN
  ES
}
